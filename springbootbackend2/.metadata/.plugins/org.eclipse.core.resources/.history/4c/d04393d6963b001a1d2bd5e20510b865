package com.app.core.controller;

import java.time.LocalDate;
import java.util.List;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.app.core.pojos.CourseCoordinator;
import com.app.core.pojos.Gender;
import com.app.core.pojos.Student;
import com.app.core.pojos.StudentComplaints;
import com.app.core.pojos.StudentNotices;
import com.app.core.pojos.StudentOfTheMonth;
import com.app.core.pojos.StudentStatus;
import com.app.core.service.IStudentService;

@RestController // =@Controller+@ResponseBody
//on all ret types of req handling methods.
@RequestMapping("/Student")
@CrossOrigin // origins=*
public class StudentController {
	
	@Autowired
	private IStudentService sservice;
	
	@PostConstruct
	public void init() {
		System.out.println("in init " + sservice);
	}
	
	
	@PostMapping("/login")
	public ResponseEntity<?> validateLogin(@RequestParam int studentPrn,@RequestParam String studentPassword ) {
		System.out.println(" Student dtls " + studentPrn);
          Student studDetails = sservice.validateStudentLogin(studentPrn, studentPassword);
		if (studDetails == null)
			return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
		return new ResponseEntity<Student>(studDetails, HttpStatus.OK);
	}
	
	@GetMapping("/verify")
	public ResponseEntity<?> getSecurityVerify(@PathVariable int studentPrn,@PathVariable String email,@PathVariable LocalDate dateOfBirth) {
		System.out.println("get emp dtls " + studentPrn);
	    
	    try {
			Student stud=sservice.validateSecurityQuestion(studentPrn, email, dateOfBirth);
			return new ResponseEntity<Student>(stud, HttpStatus.CREATED);
		} catch (Exception e1) {
			e1.printStackTrace();// only for debugging
			return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

    
	}
	@PostMapping("/register")
	public ResponseEntity<?> saveStudentDtls( @RequestParam int prn,@RequestParam String studentName,@RequestParam String courseName,@RequestParam String email, @RequestParam String password,@RequestParam String phoneNumber,
			@RequestParam String studentGender,@RequestParam LocalDate dateofbirth,@RequestParam LocalDate regDate,@RequestParam String studentStatus,
			@RequestParam(value = "image", required = false) MultipartFile image) {
		System.out.println("in save student " + prn + " " + studentName);

		try {
			Student stud = new Student(prn,studentName,courseName,email,password,phoneNumber,Gender.valueOf(studentGender),dateofbirth,regDate,StudentStatus.valueOf(studentStatus),image.getBytes());
			if (image != null) {
				// image is supplied
				stud.setStudentImage(image.getBytes());
			}
			return new ResponseEntity<Student>(sservice.insertStudentDetails(stud), HttpStatus.CREATED);
		} catch (Exception e1) {
			e1.printStackTrace();// only for debugging
			return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}

    
    

    @PutMapping("/update")
	public ResponseEntity<?> updatePassword( @RequestParam int studentPrn,@RequestParam String studentPassword) {
		System.out.println("in save student " + studentPrn + " " );

		try {
			Student stud=sservice.getStudentDetails(studentPrn) ;
			stud.setPassword(studentPassword);
			return new ResponseEntity<Student>(sservice.insertStudentDetails(stud), HttpStatus.CREATED);
		} catch (Exception e1) {
			e1.printStackTrace();// only for debugging
			return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}
    
    @GetMapping("/getListOfNotice")
    public ResponseEntity<?>  getListOfNotice() {
		System.out.println("in Notice student " +  " " );

		try {
			
			return new ResponseEntity<List<StudentNotices>>(sservice.getListofNoticeActive(), HttpStatus.CREATED);
		} catch (Exception e1) {
			e1.printStackTrace();// only for debugging
			return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

	} 
    
    @GetMapping("/getListOfStom")
    public ResponseEntity<?>  getListofStom() {
    	
	System.out.println("in Stom student " +  " " );

	try {
		
		return new ResponseEntity<List<StudentOfTheMonth>>(sservice.getStomDetails(), HttpStatus.CREATED);
	} catch (Exception e1) {
		e1.printStackTrace();// only for debugging
		return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
	}

}
    
    
    @PostMapping("/insertcomplaints")
    public ResponseEntity<?> insertComplaints( @RequestParam int prn,@RequestParam String complaintSubjectName,@RequestParam String complaintDescription,@RequestParam LocalDate complaintDate)
    {
		System.out.println("in save student " + prn + " " );

		try {
			StudentComplaints studcomplaint=new StudentComplaints(prn,complaintSubjectName,complaintDescription,complaintDate) ;
			
			return new ResponseEntity<StudentComplaints>(sservice.insertComplaints(studcomplaint), HttpStatus.CREATED);
		} catch (Exception e1) {
			e1.printStackTrace();// only for debugging
			return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}
    
    @GetMapping("/viewComplaints{studetnPrn}")
    public ResponseEntity<?>  viewComplaints(int studentPrn) {
    	
	System.out.println("in viewComplaint student " +  " " );

	try {
		
		return new ResponseEntity<List<StudentComplaints>>(sservice.viewComplaints(studentPrn), HttpStatus.CREATED);
	} catch (Exception e1) {
		e1.printStackTrace();// only for debugging
		return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
	}

}  
    @GetMapping("/removeComplaints{complaintId}")
    public ResponseEntity<?>  removeComplaints(int complaintId) {
    	
	System.out.println("in removeComplaint student " +  " " );
           
	try {
		StudentComplaints st=sservice.getComplaint(complaintId);
		return new ResponseEntity<Boolean>(sservice.removeComplaints(st),HttpStatus.OK);
	} catch (Exception e1) {
		e1.printStackTrace();// only for debugging
		return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
	}

}  

    @PostMapping("/updatecomplaints")
    public ResponseEntity<?> updateComplaints( @RequestParam int complaintId,@RequestParam int prn,@RequestParam String complaintSubjectName,@RequestParam String complaintDescription,@RequestParam LocalDate complaintDate)
    {
		System.out.println("in save student " + prn + " " );

		try {
			StudentComplaints st=sservice.getComplaint(complaintId);
			st.setComplaintSubjectName(complaintSubjectName);
			st.setComplaintDescription(complaintDescription);
			st.setComplaintDate(complaintDate);
					
			return new ResponseEntity<StudentComplaints>(sservice.updateComplaint(st), HttpStatus.CREATED);
		} catch (Exception e1) {
			e1.printStackTrace();// only for debugging
			return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}

    
    
}
