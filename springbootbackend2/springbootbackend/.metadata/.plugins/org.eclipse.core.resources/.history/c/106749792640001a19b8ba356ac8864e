package com.app.core.controller;

import java.time.LocalDate;
import java.util.List;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.app.core.dao.IStudent;
import com.app.core.pojos.Complaint;
import com.app.core.pojos.CourseCoordinator;
import com.app.core.pojos.Gender;
import com.app.core.pojos.Student;
import com.app.core.pojos.StudentComplaints;
import com.app.core.pojos.StudentNotices;
import com.app.core.pojos.StudentOfTheMonth;
import com.app.core.pojos.StudentStatus;
import com.app.core.service.IStudentService;

@RestController // =@Controller+@ResponseBody
//on all ret types of req handling methods.
@RequestMapping("/Studentmapping")
 // origins=*
@CrossOrigin
public class StudentController {
	
	@Autowired
	private IStudentService sservice;
	
	@PostConstruct
	public void init() {
		System.out.println("in init " + sservice);
	}
	
	
	@PostMapping("/login")
	public ResponseEntity<?> validateLogin(@RequestBody Student studentdetails) 
	{
		Student st=new Student();
		st.setStudentPrn(studentdetails.getStudentPrn());
		st.setPassword(studentdetails.getPassword());
		
		System.out.println(" Student dtls " + st.getStudentPrn());
          Student studDetails = sservice.validateStudentLogin(st.getStudentPrn(),st.getPassword());
      //    Student studDetails = sservice.validateStudentLogin(190170,"12345678");
      	
          if (studDetails == null)
			return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
		return new ResponseEntity<Student>(studDetails, HttpStatus.OK);
	}
/*	@PostMapping("/login")
	public ResponseEntity<?> validateLogin(@RequestBody Student studentdetails) 
	{
		System.out.println(" Student dtls " + studentdetails.getStudentPrn());
          Student studDetails = sservice.validateStudentLogin(studentdetails.getStudentPrn(), studentdetails.getPassword());
		if (studDetails == null)
			return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
		return new ResponseEntity<Student>(studDetails, HttpStatus.OK);
	}*/
	
	@PostMapping("/verify")
	public ResponseEntity<?> getSecurityVerify(@RequestBody Student stud) {
		System.out.println("get emp dtls ");
	    
	    try {
			Student studt=sservice.validateSecurityQuestion(stud.getStudentPrn(),stud.getEmail(),stud.getDateofbirth());
			return new ResponseEntity<Student>(studt, HttpStatus.OK);
		} catch (Exception e1) {
			e1.printStackTrace();// only for debugging
			return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

    
	}
	@PostMapping("/register")
	public ResponseEntity<?> saveStudentDtls(@RequestBody Student stud)
	{
      Student studdetails=new Student();
      stud.setCourseName("DAC");
      stud.setStudentGender(Gender.valueOf("Male"));
      stud.setRegistrationDate(stud.getDateofbirth());
      stud.setStudentStatus(StudentStatus.valueOf("verified"));
		
		try {
			
			
			return new ResponseEntity<Student>(sservice.insertStudentDetails(stud), HttpStatus.OK);
		} catch (Exception e1) {
			e1.printStackTrace();// only for debugging
			return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}

    
    
/*
    @PutMapping("/update")
	public ResponseEntity<?> updatePassword( @RequestParam int studentPrn,@RequestParam String studentPassword) {
		System.out.println("in save student " + studentPrn + " " );

		try {
			Student stud=sservice.getStudentDetails(studentPrn) ;
			stud.setPassword(studentPassword);
			return new ResponseEntity<Student>(sservice.insertStudentDetails(stud), HttpStatus.OK);
		} catch (Exception e1) {
			e1.printStackTrace();// only for debugging
			return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}
   */ 
    @GetMapping("/getListOfNotice")
    public ResponseEntity<?>  getListOfNotice() {
		System.out.println("in Notice student " +  " " );

		try {
			
			return new ResponseEntity<List<StudentNotices>>(sservice.getListofNoticeActive(), HttpStatus.OK);
		} catch (Exception e1) {
			e1.printStackTrace();// only for debugging
			return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

	} 
    
    @GetMapping("/getListOfStom")
    public ResponseEntity<?>  getListofStom() {
    	
	System.out.println("in Stom student " +  " " );

	try {
		
		return new ResponseEntity<List<StudentOfTheMonth>>(sservice.getStomDetails(), HttpStatus.OK);
	} catch (Exception e1) {
		e1.printStackTrace();// only for debugging
		return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
	}

}
    
    
    @PostMapping("/insertcomplaints")
    public ResponseEntity<?> insertComplaints(@RequestBody)   {
		System.out.println("in save student " );

		try {
			StudentComplaints studcomplaint=new StudentComplaints(prn,complaintSubjectName,complaintDescription,complaintDate,Complaint.valueOf(complaintStatus)) ;
			
			return new ResponseEntity<StudentComplaints>(sservice.insertComplaints(studcomplaint), HttpStatus.OK);
		} catch (Exception e1) {
			e1.printStackTrace();// only for debugging
			return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}
    
    @PostMapping("/viewComplaints")
    public ResponseEntity<?>  viewComplaints(@RequestBody int studentPrn) {
    	
	System.out.println("in viewComplaint student " +  " " );

	//int studentPrn=190145;
	try {
		
		return new ResponseEntity<List<StudentComplaints>>(sservice.viewComplaints(studentPrn), HttpStatus.CREATED);
	} catch (Exception e1) {
		e1.printStackTrace();// only for debugging
		return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
	}

}  
    @GetMapping("/removeComplaints/{complaintId}")
    public ResponseEntity<?>  removeComplaints(int complaintId) {
    	
	System.out.println("in removeComplaint student " +  " " );
           
	try {
		StudentComplaints st=sservice.getComplaint(complaintId);
		return new ResponseEntity<Boolean>(sservice.removeComplaints(st),HttpStatus.OK);
	} catch (Exception e1) {
		e1.printStackTrace();// only for debugging
		return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
	}

}  

    @PostMapping("/updatecomplaints")
    public ResponseEntity<?> updateComplaints( @RequestParam int complaintId,@RequestParam int prn,@RequestParam String complaintSubjectName,@RequestParam String complaintDescription,@RequestParam LocalDate complaintDate)
    {
		System.out.println("in save student " + prn + " " );

		try {
			StudentComplaints st=sservice.getComplaint(complaintId);
			st.setComplaintSubjectName(complaintSubjectName);
			st.setComplaintDescription(complaintDescription);
			st.setComplaintDate(complaintDate);
					
			return new ResponseEntity<StudentComplaints>(sservice.updateComplaint(st), HttpStatus.CREATED);
		} catch (Exception e1) {
			e1.printStackTrace();// only for debugging
			return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}
    
    
@PostMapping("/viewNoticesDetails")
    
    public ResponseEntity<?> viewNoticesDetails(@RequestBody Integer noticeId )  {
    			
    			System.out.println("get StudentPrn dtls " +  noticeId);
    	System.out.println("get StudentPrn dtls " );
	    
    		    try {
    		    
    				StudentNotices ss= sservice.getNoticesDetails(noticeId);
    				
    				return new ResponseEntity<StudentNotices>(ss, HttpStatus.OK);
    			} catch (Exception e1) {
    				e1.printStackTrace();// only for debugging
    				return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
    			}

    	    
    		} 

    @PostMapping("/studentdetails")
    
    public ResponseEntity<?> getStudentDetails(@RequestParam Integer studentPrn)  {
    			
    			System.out.println("get StudentPrn dtls " + studentPrn);
    	System.out.println("get StudentPrn dtls " );
	    
    		    try {
    		    
    				Student ss= sservice.getStudentDetails(studentPrn);
    				
    				return new ResponseEntity<Student>(ss, HttpStatus.OK);
    			} catch (Exception e1) {
    				e1.printStackTrace();// only for debugging
    				return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
    			}

    	    
    		} 
    
    /*@GetMapping("/studentalldetails")
    public ResponseEntity<?> getALLStudentDetails()  {
    			
    			System.out.println("get StudentPrn dtls ");
    		    
    		    try {
    		    
    				
    				return new ResponseEntity<List<String>>("xdaxasaxd", HttpStatus.OK);
    			} catch (Exception e1) {
    				e1.printStackTrace();// only for debugging
    				return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
    			}

    	    
    		} 

    */
    
@PostMapping("/viewComplaintsDetails")
    
    public ResponseEntity<?> viewComplaintDetails(@RequestBody Integer studentComplaintId )  {
    			
    			System.out.println("get StudentPrn dtls " +  studentComplaintId);
    	System.out.println("get StudentPrn dtls " );
	    
    		    try {
    		    
    				StudentComplaints ss= sservice.getComplaintsDetails(studentComplaintId);
    				
    				return new ResponseEntity<StudentComplaints>(ss, HttpStatus.OK);
    			} catch (Exception e1) {
    				e1.printStackTrace();// only for debugging
    				return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
    			}

    	    
    		} 
    
}
