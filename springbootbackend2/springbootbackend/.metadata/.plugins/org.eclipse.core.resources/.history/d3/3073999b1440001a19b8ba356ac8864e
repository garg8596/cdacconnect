package com.app.core.service;

import java.time.LocalDate;
import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.app.core.dao.IStudent;
import com.app.core.pojos.Student;
import com.app.core.pojos.StudentComplaints;
import com.app.core.pojos.StudentNotices;
import com.app.core.pojos.StudentOfTheMonth;



@Service
@Transactional
public class StudentServiceImpl implements IStudentService {

	@Autowired
	private IStudent sdao;
	

	public StudentServiceImpl() {
		super();
	}

	@Override
	public Student validateStudentLogin(int studentPrn, String studentPassword) {
	
		return sdao.validateStudentLogin(studentPrn, studentPassword);
	}
	@Override
	public String validateStudentLogin1(int studentPrn, String studentPassword) {
	
		return "sdao.validateStudentLogin(studentPrn, studentPassword)";
	}

	@Override
	public Student validateSecurityQuestion(int studentPrn, String email, LocalDate dataOfBirth) {
		
		return sdao.validateSecurityQuestion(studentPrn, email, dataOfBirth);
	}

	@Override
	public Student insertStudentDetails(Student stud) {
		
		return sdao.insertStudentDetails(stud);
	}

	@Override
	public Student updateNewpassword(Student stud) {
		
		return sdao.updateNewpassword(stud);
	}

	@Override
	public List<StudentNotices> getListofNoticeActive() {
		
		return sdao.getListofNoticeActive();
	}

	@Override
	public Student getStudentDetails(int studentPrn) {
	
		return sdao.getStudentDetails(studentPrn);
	}

	@Override
	public List<StudentNotices> getStudentNotices() {
		
		return sdao.getStudentNotices() ;
	}

	@Override
	public List<StudentOfTheMonth> getStomDetails() {
		
		return sdao.getStomDetails() ;
	}

	@Override
	public StudentComplaints insertComplaints(StudentComplaints sc) {
		
		return sdao.insertComplaints(sc) ;
	}

	@Override
	public List<StudentComplaints> viewComplaints(int Studentprn) {
		
		return sdao.viewComplaints(Studentprn);
	}

	@Override
	public boolean removeComplaints(StudentComplaints scom) {
		   
		return sdao.removeComplaints(scom) ;
	}

	@Override
	public StudentComplaints getComplaint(int complaintId) {
		
		return sdao.getComplaint(complaintId);
	}

	@Override
	public StudentComplaints updateComplaint(StudentComplaints scomp) {
		
		return sdao.updateComplaint(scomp) ;
	}
	

}
